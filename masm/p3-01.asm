.386
DATA	SEGMENT USE16
	BUFFSIZE DB 80
	ACTLEN DB 0
    INP DB 80 DUP(?)
	OUTP1 db "LETTERS:00H $" 
	OUTP2 db "ELSE:00H $" 
	OUTP3 db "NUMS:00H $" 
DATA	ENDS

CODE	SEGMENT	USE16
	ASSUME	CS: CODE,DS:DATA
START:	
	MOV	AX,DATA
	MOV	DS,AX
	
	MOV	DX,OFFSET BUFFSIZE

	MOV	AH,0AH
	INT 21H

	MOV AX,0	;AH,AL,BL分别存字母、数字、其他
	MOV	BL,0

	MOV	DI,0
	
Loc1:	
	CMP INP[DI],'a'
	JB	Loc2
	CMP INP[DI],'z'
	JA	Loc2	
	INC	AH
	JMP	END_LOC

Loc2:	
	CMP INP[DI],'A'
	JB	Loc3
	CMP INP[DI],'Z'
	JA	Loc3	
	INC	AH
	JMP	END_LOC

Loc3:	
	CMP INP[DI],'0'
	JB	Loc4
	CMP INP[DI],'9'
	JA	Loc4
	INC	AL
	JMP	END_LOC

Loc4:	
	INC BL

END_LOC:
	MOV	DL,ACTLEN
	MOV	DH,0

	INC	DI	
	CMP DI,DX
	JB Loc1
	

	MOV CL,AH	;字母数转到CL
	MOV	CH,0
	MOV BH,0	;此时cx、ax、bx存字母、数字、其他

	;开始输出
	
	MOV	AH,AL			;数字
	SHR AH,04H	;得到高四位
	AND AL,0FH	;得到低四位

	CMP AH,09
	JA	LETT_LOC1
	ADD AH,'0'
	JMP SKIP_LOC1
LETT_LOC1:
	ADD AH,'A'-10
SKIP_LOC1:
	MOV OUTP3[5],AH

	CMP AL,09
	JA	LETT_LOC2
	ADD AL,'0'
	JMP SKIP_LOC2
LETT_LOC2:
	ADD AL,'A'-10
SKIP_LOC2:
	MOV OUTP3[6],AL

	LEA	DX,OUTP3
	MOV AH,09H
	INT 21H


	MOV	BH,BL			;其他
	SHR BH,04H	;得到高四位
	AND BL,0FH	;得到低四位

	CMP BH,09
	JA	LETT_LOC3
	ADD BH,'0'
	JMP SKIP_LOC3
LETT_LOC3:
	ADD BH,'A'-10
SKIP_LOC3:
	MOV OUTP2[5],BH

	CMP BL,09
	JA	LETT_LOC4
	ADD BL,'0'
	JMP SKIP_LOC4
LETT_LOC4:
	ADD BL,'A'-10
SKIP_LOC4:
	MOV OUTP2[6],BL

	LEA	DX,OUTP2
	MOV AH,09H
	INT 21H





	MOV	CH,CL			;字母
	SHR CH,04H	;得到高四位
	AND CL,0FH	;得到低四位

	CMP CH,09
	JA	LETT_LOC5
	ADD CH,'0'
	JMP SKIP_LOC5
LETT_LOC5:
	ADD CH,'A'-10
SKIP_LOC5:
	MOV OUTP1[8],CH

	CMP CL,09
	JA	LETT_LOC6
	ADD CL,'0'
	JMP SKIP_LOC6
LETT_LOC6:
	ADD CL,'A'-10
SKIP_LOC6:
	MOV OUTP1[9],CL

	LEA	DX,OUTP1
	MOV AH,09H
	INT 21H



	MOV	AX, 4C00H
	INT  	21H
CODE	ENDS
	END	 START